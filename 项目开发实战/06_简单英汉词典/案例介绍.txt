案例介绍
本案例采用 Python 实现了一个简单的英汉词典。该英汉词典有一个单独的窗口，输入要查询的英文单词，点击查询按钮，就会显示出该单词的中文翻译。此中文翻译来自于有道网的单词查询网页，通过信息提取，找到该单词的翻译结果，并在窗口中显示出来。

学习目标
本案例主要是对 Python、 GUI 编程、爬虫的基础知识的运用。通过本案例的学习，将强化对这些知识的理解和运用，对后续的学习和运用打下坚实的基础。

需要的引入的模块
本案例以 Python 3.5.3 版本为基础，需要引入三个模块 urllib、 tkinter、 re。

模块 urllib：该模块提供了一系列用于操作 URL 的功能；
模块 tkinter：该模块是 Python 的标准 GUI 库。 Python 使用 Tkinter 可以快速的创建 GUI 应用程序。
模块 re：主要是引入正则表达式。
案例结构和主要算法
该案例只有一个文件，其算法为：

绘制窗口界面，分配好各个控件的空间位置，同时预留对象变量接口，以便翻译结果的传入、显示；
根据上一步中输入的查询单词确定需要爬取的网页的 url；
爬取由上一步确定的 url 的页面，并提取所需要的翻译数据；
将上一步得到的数据传入第一步中的对象变量，并在窗口界面中显示，完成翻译。
该案例包含的功能模块
该案例只有一个程序文件： dictionary.py，其包含的功能模块如下：

本案例定义了一个类，其包含的函数、方法如下：
getUrl( ) 函数：定义爬虫需要的 url。
getPage( ) 函数：爬取给定 url 的页面。
extracPage( ) 函数：提取网页中所需要的信息。
getParaphrase( ) 函数：获得查询单词，调用 extracPage( ) 函数，获得释义，将释义传给窗口变量。
程序执行部分有以下功能：
Tk( )、title( )、geometry( )方法，共同作用，绘制出一个设定大小、带有标题的窗口界面；
Label：标签控件，用于显示文本——“查询”、“释义”，并通过与对象变量 StringVar 的组合，来动态显示翻译结果；
Entry：输入控件，用来显示简单的文本内容，本案例中用于输入要查询的单词；
Button：按钮控件，在程序中显示按钮；
grid： Tkinter 控件的几何状态管理方法——网格，通过行、列来确定控件的空间位置。